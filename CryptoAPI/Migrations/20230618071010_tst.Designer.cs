// <auto-generated />
using System;
using CryptoAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoAPI.Migrations
{
    [DbContext(typeof(CryptoAPIContext))]
    [Migration("20230618071010_tst")]
    partial class tst
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.allinoneapi.Models.Binance_CryptoKandles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("closePrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<DateTime>("closeTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("highPrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<decimal>("lowPrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<decimal>("openPrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<DateTime>("openTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("quoteVolume")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<string>("source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("takerBuyBaseVolume")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<decimal>("takerBuyQuoteVolume")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<decimal>("tradeCount")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<DateTime?>("update_date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("volume")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.HasKey("Id");

                    b.ToTable("CryptoKandles");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Crypto_Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasPrecision(20, 10)
                        .HasColumnType("decimal(20,10)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Crypto_Price");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Crypto_Symbols", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseAsset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuoteAsset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("circulating_supply")
                        .HasColumnType("float");

                    b.Property<double?>("domination")
                        .HasColumnType("float");

                    b.Property<double?>("max_supply")
                        .HasColumnType("float");

                    b.Property<string>("source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("total_supply")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Crypto_Symbols");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Stocks.Polygon.News.InstrumentsNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("amp_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("article_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("published_utc")
                        .HasColumnType("datetime2");

                    b.Property<string>("publisherfavicon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisherhomepage_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisherlogo_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publishername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("update_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InstrumentsNews");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Stocks.Polygon.News.TickerToNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InstrumentsNewsId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticker")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentsNewsId");

                    b.ToTable("TickerToNews");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Stocks.Polygon.StockDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("active")
                        .HasColumnType("bit");

                    b.Property<string>("address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("composite_figi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("homepage_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("list_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logo_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("market_cap")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postal_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("primary_exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("round_lot")
                        .HasColumnType("int");

                    b.Property<string>("share_class_figi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("share_class_shares_outstanding")
                        .HasColumnType("float");

                    b.Property<string>("sic_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sic_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticker_root")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("total_employees")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("weighted_shares_outstanding")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("StockDescription");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Stocks.Polygon.StockInstruments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("composite_figi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("share_class_figi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("update_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StockInstruments");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Stocks.Polygon.News.TickerToNews", b =>
                {
                    b.HasOne("api.allinoneapi.Models.Stocks.Polygon.News.InstrumentsNews", null)
                        .WithMany("tickers")
                        .HasForeignKey("InstrumentsNewsId");
                });

            modelBuilder.Entity("api.allinoneapi.Models.Stocks.Polygon.News.InstrumentsNews", b =>
                {
                    b.Navigation("tickers");
                });
#pragma warning restore 612, 618
        }
    }
}
